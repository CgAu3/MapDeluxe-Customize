
所有地址为内存中地址，即(文件中地址+0x08000000)

地址      原始值      修改值   说明
----------------------------------------------------------------------------------------------------------
//更改起始指令跳转到显示起始画面代码，此项与上一版本不同，上一版本修改第一指令，此版本修改转换跳转指令
080000EC  E12FFF11 -> EA1FFFAD (ARM:bx r1 -> ARM:b $087FFFA8) //此行可通过自定义起始画面开关来切换

//更改地图数据地址
087E62DC  083AEACC -> 08C58000
087E62E0  083AED40 -> 08C5C000
...
087E6828  083F3A18 -> 08C8C000

//显示起始画面代码(*号处为与上一版本不同之处，修改目的为避免使用r1以保留其原有的跳转数据)
087FFF90  00000000 -> 04000000 //注册表-图像模式地址
087FFF94  00000000 -> 00000F03 //注册表-图像模式修改值
087FFF98  00000000 -> 00000000 //无用
087FFF9C  00000000 -> 08CC0000 //起始画面数据源地址
087FFFA0  00000000 -> 06000000 //起始画面数据目标地址
087FFFA4  00000000 -> 06012C00 //起始画面数据目标末尾地址
087FFFA8  00000000 -> E51F0020 (ARM:ldr r0, [pc, -#20]) //注册表-图像模式地址
087FFFAC  00000000*-> E51F4020 (ARM:ldr r4, [pc, -#20]) //注册表-图像模式修改值
087FFFB0  00000000*-> E5004000 (ARM:str r4, [r0]) //写入注册表-图像模式
087FFFB4  00000000 -> E51F0020 (ARM:ldr r0, [pc, -#20]) //起始画面数据源地址
087FFFB8  00000000*-> E51F4020 (ARM:ldr r4, [pc, -#20]) //起始画面数据目标地址
087FFFBC  00000000 -> E51F2020 (ARM:ldr r2, [pc, -#20]) //起始画面数据目标末尾地址
087FFFC0  00000000 -> E4903004 (ARM:ldr r3, [r0], #4) //读取起始画面数据并地址前进
087FFFC4  00000000 -> E4813004 (ARM:str r3, [r1], #4) //写入起始画面数据并地址前进
087FFFC8  00000000*-> E1540002 (ARM:cmps r4, r2) //比较当前地址与目标末尾地址
087FFFCC  00000000 -> 1AFFFFFB (ARM:bne $087FFFD0) //如果不相等则跳回继续写入
087FFFD0  00000000 -> E59F0010 (ARM:ldr r0, [pc, #10]) //读取注册表-键盘地址
087FFFD4  00000000*-> E1DF41B0 (ARM:ldrh r4, [pc, #10]) //读取注册表-键盘对比数据
087FFFD8  00000000 -> E1D020B0 (ARM:ldrh r2, [r0]) //读取注册表-键盘
087FFFDC  00000000*-> E1540002 (ARM:cmps r4, r2) //比较注册表数据与对比数据
087FFFE0  00000000 -> 0AFFFFFC (ARM:beq $087FFFE8) //如果相等则跳回继续等待
087FFFE4  00000000*-> E12FFF11 (ARM:bx r1) //跳回原始起始指令
087FFFE8  00000000 -> 04000130 //注册表-键盘地址
087FFFEC  00000000 -> 000003FF //表示“什么都没按”的注册表-键盘对比数据
/*上述指令就像下面的C语言代码一样：
	//更改图形模式
	*(u32*)0x04000000=0x00000F03;
	
	//搬运图像
	u32* imgsrc=(u32*)0x08CC0000;
	u32* imgdst=(u32*)0x06000000;
	u32* imgdstend=(u32*)0x06012C00;
	u32 imgt;
	do{
		*(imgdst++)=*(imgsrc++);
	}while(imgdst!=imgdstend);
	
	//等待按键
	u32 key;
	do{
		key=*(u32*)0x04000130;
	}while(key==0x000003FF);
	goto game_code;
*/
087FFF00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
        ->52 4F 4D 5F 52 45 42 55 49 4C 44 5F 56 31 00 00 ("ROM_REBUILD_V1\0") //Magic ("V1"是旧版遗留物)

//之后的数据为用户数据
08800000  0x4000[STEP_INDEXING_COUNT] 地图数据，每0x4000为一张地图，其结构：
   +0000  地图头
   +0100  传送门列表
   +0800  物件列表
   +1000  主地图
   +2000  掀开地图映射
   +3000  掀开地图列表

08CC0000~08CD2C00  自定义起始画面数据

08CD3000  附加信息

//...
08CE0000~09000000  自定义图库区
08CE0000  0x8000[USER_GLIB_COUNT] USER_GLIB_COUNT=100
   +0000  Tile // 原游戏中压缩前最大0x4000，压缩后最大0x3284
   +4000  Map // 原游戏中压缩前最大0x1BA0，压缩后最大0x14AE
   +6000  0x200(Use 0x102)[16] Plt
   +6150  (插空)Title
   